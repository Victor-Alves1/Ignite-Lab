import {
  Provider,
  ViewType,
  VmAudio,
  VmCaptionControl,
  VmCaptions,
  VmClickToPlay,
  VmControl,
  VmControlGroup,
  VmControlSpacer,
  VmControls,
  VmCurrentTime,
  VmDailymotion,
  VmDash,
  VmDblClickFullscreen,
  VmDefaultControls,
  VmDefaultSettings,
  VmDefaultUi,
  VmEmbed,
  VmEndTime,
  VmFile,
  VmFullscreenControl,
  VmHls,
  VmIcon,
  VmIconLibrary,
  VmLiveIndicator,
  VmLoadingScreen,
  VmMenu,
  VmMenuItem,
  VmMenuRadio,
  VmMenuRadioGroup,
  VmMuteControl,
  VmPipControl,
  VmPlaybackControl,
  VmPlayer,
  VmPoster,
  VmScrim,
  VmScrubberControl,
  VmSettings,
  VmSettingsControl,
  VmSkeleton,
  VmSlider,
  VmSpinner,
  VmSubmenu,
  VmTime,
  VmTimeProgress,
  VmTooltip,
  VmUi,
  VmVideo,
  VmVimeo,
  VmVolumeControl,
  VmYoutube,
  createDispatcher,
  findPlayer,
  usePlayerContext,
  watchComponentRegistry
} from "./chunk-EFDQ7O7X.js";
import {
  require_react
} from "./chunk-HN56VSZG.js";
import {
  __commonJS,
  __toESM
} from "./chunk-5CYG367S.js";

// node_modules/@seznam/compose-react-refs/composeRefs.js
var require_composeRefs = __commonJS({
  "node_modules/@seznam/compose-react-refs/composeRefs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function composeRefs2() {
      var refs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        refs[_i] = arguments[_i];
      }
      if (refs.length === 2) {
        return composeTwoRefs(refs[0], refs[1]) || null;
      }
      var composedRef = refs.slice(1).reduce(function(semiCombinedRef, refToInclude) {
        return composeTwoRefs(semiCombinedRef, refToInclude);
      }, refs[0]);
      return composedRef || null;
    }
    exports.default = composeRefs2;
    var composedRefCache = /* @__PURE__ */ new WeakMap();
    function composeTwoRefs(ref1, ref2) {
      if (ref1 && ref2) {
        var ref1Cache = composedRefCache.get(ref1) || /* @__PURE__ */ new WeakMap();
        composedRefCache.set(ref1, ref1Cache);
        var composedRef = ref1Cache.get(ref2) || function(instance) {
          updateRef(ref1, instance);
          updateRef(ref2, instance);
        };
        ref1Cache.set(ref2, composedRef);
        return composedRef;
      }
      if (!ref1) {
        return ref2;
      } else {
        return ref1;
      }
    }
    function updateRef(ref, instance) {
      if (typeof ref === "function") {
        ref(instance);
      } else {
        ref.current = instance;
      }
    }
  }
});

// node_modules/@vime/react/dist/esm/lib.jsx
var import_compose_react_refs = __toESM(require_composeRefs());
var import_react = __toESM(require_react());
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var define = (tagName, clazz) => {
  const isClient = typeof window !== "undefined";
  if (isClient && !customElements.get(tagName))
    customElements.define(tagName, clazz);
};
var dashToPascalCase = (str) => str.toLowerCase().split("-").map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1)).join("");
var isEvent = (prop) => {
  var _a;
  return prop.indexOf("on") === 0 && prop[2] === ((_a = prop[2]) === null || _a === void 0 ? void 0 : _a.toUpperCase());
};
var toDomEventName = (prop) => prop.charAt(2).toLowerCase() + prop.substring(3);
function createComponent(tagName, componentProps) {
  const Component = (0, import_react.forwardRef)((_a, forwardedRef) => {
    var { children } = _a, props = __rest(_a, ["children"]);
    const [ref, setRef] = (0, import_react.useState)(null);
    const setRefCb = (0, import_react.useCallback)((node) => {
      setRef(node);
    }, []);
    const eventHandlers = (0, import_react.useRef)(/* @__PURE__ */ new Map());
    const domProps = (0, import_react.useMemo)(() => Object.keys(props).filter((prop) => !componentProps.has(prop) && !isEvent(prop)).reduce((p, c) => Object.assign(Object.assign({}, p), { [c]: props[c] }), {}), [props]);
    const wcProps = (0, import_react.useMemo)(() => Object.keys(props).filter((prop) => componentProps.has(prop) || isEvent(prop)).reduce((p, c) => Object.assign(Object.assign({}, p), { [c]: props[c] }), {}), [props]);
    const listen = (0, import_react.useCallback)((prop, handler) => {
      var _a2;
      const domEvent = toDomEventName(prop);
      (_a2 = eventHandlers.current.get(domEvent)) === null || _a2 === void 0 ? void 0 : _a2();
      if (!ref || !handler)
        return;
      ref.addEventListener(domEvent, handler);
      eventHandlers.current.set(domEvent, () => {
        ref.removeEventListener(domEvent, handler);
      });
    }, [ref]);
    const cleanup = (0, import_react.useCallback)(() => {
      eventHandlers.current.forEach((fn) => fn());
      eventHandlers.current.clear();
    }, []);
    (0, import_react.useEffect)(() => () => {
      cleanup();
    }, []);
    (0, import_react.useEffect)(() => {
      if (!ref)
        return;
      Object.keys(wcProps).forEach((prop) => {
        if (isEvent(prop)) {
          listen(prop, wcProps[prop]);
          return;
        }
        if (ref[prop] !== wcProps[prop]) {
          ref[prop] = wcProps[prop];
        }
      });
    }, [ref, wcProps]);
    return (0, import_react.createElement)(tagName, Object.assign({ ref: (0, import_compose_react_refs.default)(setRefCb, forwardedRef) }, domProps), children);
  });
  Component.displayName = dashToPascalCase(tagName);
  return Component;
}

// node_modules/@vime/react/dist/esm/components/Audio.jsx
define("vm-audio", VmAudio);
define("vm-file", VmFile);
var Audio_default = createComponent("vm-audio", /* @__PURE__ */ new Set(["willAttach", "crossOrigin", "preload", "disableRemotePlayback", "mediaTitle"]));

// node_modules/@vime/react/dist/esm/components/CaptionControl.jsx
define("vm-caption-control", VmCaptionControl);
define("vm-control", VmControl);
define("vm-icon", VmIcon);
define("vm-tooltip", VmTooltip);
var CaptionControl_default = createComponent("vm-caption-control", /* @__PURE__ */ new Set(["showIcon", "hideIcon", "tooltipPosition", "tooltipDirection", "hideTooltip", "icons", "keys", "i18n", "playbackReady", "textTracks", "isTextTrackVisible"]));

// node_modules/@vime/react/dist/esm/components/Captions.jsx
define("vm-captions", VmCaptions);
var Captions_default = createComponent("vm-captions", /* @__PURE__ */ new Set(["hidden", "isControlsActive", "isVideoView", "playbackStarted", "textTracks", "currentTextTrack", "isTextTrackVisible"]));

// node_modules/@vime/react/dist/esm/components/ClickToPlay.jsx
define("vm-click-to-play", VmClickToPlay);
var ClickToPlay_default = createComponent("vm-click-to-play", /* @__PURE__ */ new Set(["useOnMobile", "paused", "isVideoView", "isMobile"]));

// node_modules/@vime/react/dist/esm/components/Control.jsx
define("vm-control", VmControl);
var Control_default = createComponent("vm-control", /* @__PURE__ */ new Set(["keys", "identifier", "hidden", "label", "menu", "expanded", "pressed", "isTouch"]));

// node_modules/@vime/react/dist/esm/components/ControlGroup.jsx
define("vm-control-group", VmControlGroup);
var ControlGroup_default = createComponent("vm-control-group", /* @__PURE__ */ new Set(["space"]));

// node_modules/@vime/react/dist/esm/components/ControlSpacer.jsx
define("vm-control-spacer", VmControlSpacer);
var ControlSpacer_default = createComponent("vm-control-spacer", /* @__PURE__ */ new Set([]));

// node_modules/@vime/react/dist/esm/components/Controls.jsx
define("vm-controls", VmControls);
var Controls_default = createComponent("vm-controls", /* @__PURE__ */ new Set(["hidden", "fullWidth", "fullHeight", "direction", "align", "justify", "pin", "activeDuration", "waitForPlaybackStart", "hideWhenPaused", "hideOnMouseLeave", "isAudioView", "isSettingsActive", "playbackReady", "isControlsActive", "paused", "playbackStarted"]));

// node_modules/@vime/react/dist/esm/components/CurrentTime.jsx
define("vm-current-time", VmCurrentTime);
define("vm-time", VmTime);
var CurrentTime_default = createComponent("vm-current-time", /* @__PURE__ */ new Set(["currentTime", "i18n", "alwaysShowHours"]));

// node_modules/@vime/react/dist/esm/components/Dailymotion.jsx
define("vm-dailymotion", VmDailymotion);
define("vm-embed", VmEmbed);
var Dailymotion_default = createComponent("vm-dailymotion", /* @__PURE__ */ new Set(["videoId", "shouldAutoplayQueue", "showUpNextQueue", "showShareButtons", "color", "syndication", "showDailymotionLogo", "showVideoInfo", "language", "autoplay", "controls", "poster", "logger", "loop", "muted", "playsinline"]));

// node_modules/@vime/react/dist/esm/components/Dash.jsx
define("vm-dash", VmDash);
define("vm-file", VmFile);
define("vm-video", VmVideo);
var Dash_default = createComponent("vm-dash", /* @__PURE__ */ new Set(["src", "version", "libSrc", "config", "autoplay", "crossOrigin", "preload", "poster", "controlsList", "autoPiP", "disablePiP", "disableRemotePlayback", "mediaTitle", "enableTextTracksByDefault", "shouldRenderNativeTextTracks", "isTextTrackVisible", "currentTextTrack"]));

// node_modules/@vime/react/dist/esm/components/DblClickFullscreen.jsx
define("vm-dbl-click-fullscreen", VmDblClickFullscreen);
var DblClickFullscreen_default = createComponent("vm-dbl-click-fullscreen", /* @__PURE__ */ new Set(["useOnMobile", "isFullscreenActive", "isVideoView", "playbackReady", "isMobile"]));

// node_modules/@vime/react/dist/esm/components/DefaultControls.jsx
define("vm-default-controls", VmDefaultControls);
define("vm-caption-control", VmCaptionControl);
define("vm-control", VmControl);
define("vm-icon", VmIcon);
define("vm-tooltip", VmTooltip);
define("vm-control-group", VmControlGroup);
define("vm-control-spacer", VmControlSpacer);
define("vm-controls", VmControls);
define("vm-current-time", VmCurrentTime);
define("vm-time", VmTime);
define("vm-end-time", VmEndTime);
define("vm-fullscreen-control", VmFullscreenControl);
define("vm-live-indicator", VmLiveIndicator);
define("vm-mute-control", VmMuteControl);
define("vm-pip-control", VmPipControl);
define("vm-playback-control", VmPlaybackControl);
define("vm-scrim", VmScrim);
define("vm-scrubber-control", VmScrubberControl);
define("vm-slider", VmSlider);
define("vm-settings-control", VmSettingsControl);
define("vm-time-progress", VmTimeProgress);
define("vm-volume-control", VmVolumeControl);
var DefaultControls_default = createComponent("vm-default-controls", /* @__PURE__ */ new Set(["activeDuration", "waitForPlaybackStart", "hideWhenPaused", "hideOnMouseLeave", "theme", "isMobile", "isLive", "isAudioView", "isVideoView"]));

// node_modules/@vime/react/dist/esm/components/DefaultSettings.jsx
define("vm-default-settings", VmDefaultSettings);
define("vm-icon", VmIcon);
define("vm-menu", VmMenu);
define("vm-menu-item", VmMenuItem);
define("vm-menu-radio", VmMenuRadio);
define("vm-menu-radio-group", VmMenuRadioGroup);
define("vm-settings", VmSettings);
define("vm-submenu", VmSubmenu);
var DefaultSettings_default = createComponent("vm-default-settings", /* @__PURE__ */ new Set(["pin", "i18n", "playbackReady", "playbackRate", "playbackRates", "isVideoView", "playbackQuality", "playbackQualities", "textTracks", "currentTextTrack", "audioTracks", "currentAudioTrack", "isTextTrackVisible"]));

// node_modules/@vime/react/dist/esm/components/DefaultUi.jsx
define("vm-default-ui", VmDefaultUi);
define("vm-caption-control", VmCaptionControl);
define("vm-control", VmControl);
define("vm-icon", VmIcon);
define("vm-tooltip", VmTooltip);
define("vm-captions", VmCaptions);
define("vm-click-to-play", VmClickToPlay);
define("vm-control-group", VmControlGroup);
define("vm-control-spacer", VmControlSpacer);
define("vm-controls", VmControls);
define("vm-current-time", VmCurrentTime);
define("vm-time", VmTime);
define("vm-dbl-click-fullscreen", VmDblClickFullscreen);
define("vm-default-controls", VmDefaultControls);
define("vm-end-time", VmEndTime);
define("vm-fullscreen-control", VmFullscreenControl);
define("vm-live-indicator", VmLiveIndicator);
define("vm-mute-control", VmMuteControl);
define("vm-pip-control", VmPipControl);
define("vm-playback-control", VmPlaybackControl);
define("vm-scrim", VmScrim);
define("vm-scrubber-control", VmScrubberControl);
define("vm-slider", VmSlider);
define("vm-settings-control", VmSettingsControl);
define("vm-time-progress", VmTimeProgress);
define("vm-volume-control", VmVolumeControl);
define("vm-default-settings", VmDefaultSettings);
define("vm-menu", VmMenu);
define("vm-menu-item", VmMenuItem);
define("vm-menu-radio", VmMenuRadio);
define("vm-menu-radio-group", VmMenuRadioGroup);
define("vm-settings", VmSettings);
define("vm-submenu", VmSubmenu);
define("vm-loading-screen", VmLoadingScreen);
define("vm-poster", VmPoster);
define("vm-spinner", VmSpinner);
define("vm-ui", VmUi);
var DefaultUi_default = createComponent("vm-default-ui", /* @__PURE__ */ new Set(["noClickToPlay", "noDblClickFullscreen", "noCaptions", "noPoster", "noSpinner", "noControls", "noSettings", "noLoadingScreen"]));

// node_modules/@vime/react/dist/esm/components/Embed.jsx
define("vm-embed", VmEmbed);
var Embed_default = createComponent("vm-embed", /* @__PURE__ */ new Set(["embedSrc", "mediaTitle", "params", "origin", "preconnections", "decoder"]));

// node_modules/@vime/react/dist/esm/components/EndTime.jsx
define("vm-end-time", VmEndTime);
define("vm-time", VmTime);
var EndTime_default = createComponent("vm-end-time", /* @__PURE__ */ new Set(["duration", "i18n", "alwaysShowHours"]));

// node_modules/@vime/react/dist/esm/components/File.jsx
define("vm-file", VmFile);
var File_default = createComponent("vm-file", /* @__PURE__ */ new Set(["willAttach", "crossOrigin", "preload", "poster", "mediaTitle", "controlsList", "autoPiP", "disablePiP", "disableRemotePlayback", "viewType", "playbackRates", "language", "autoplay", "controls", "logger", "loop", "muted", "playsinline", "noConnect", "paused", "currentTime", "volume", "playbackReady", "playbackStarted", "currentTextTrack", "hasCustomTextManager", "isTextTrackVisible", "shouldRenderNativeTextTracks"]));

// node_modules/@vime/react/dist/esm/components/FullscreenControl.jsx
define("vm-fullscreen-control", VmFullscreenControl);
define("vm-control", VmControl);
define("vm-icon", VmIcon);
define("vm-tooltip", VmTooltip);
var FullscreenControl_default = createComponent("vm-fullscreen-control", /* @__PURE__ */ new Set(["enterIcon", "exitIcon", "icons", "tooltipPosition", "tooltipDirection", "hideTooltip", "keys", "isFullscreenActive", "i18n", "playbackReady"]));

// node_modules/@vime/react/dist/esm/components/Hls.jsx
define("vm-hls", VmHls);
define("vm-file", VmFile);
define("vm-video", VmVideo);
var Hls_default = createComponent("vm-hls", /* @__PURE__ */ new Set(["version", "libSrc", "config", "crossOrigin", "preload", "poster", "controlsList", "autoPiP", "disablePiP", "disableRemotePlayback", "playbackReady", "mediaTitle"]));

// node_modules/@vime/react/dist/esm/components/Icon.jsx
define("vm-icon", VmIcon);
var Icon_default = createComponent("vm-icon", /* @__PURE__ */ new Set(["name", "src", "label", "library", "icons"]));

// node_modules/@vime/react/dist/esm/components/IconLibrary.jsx
define("vm-icon-library", VmIconLibrary);
var IconLibrary_default = createComponent("vm-icon-library", /* @__PURE__ */ new Set(["name", "resolver", "icons"]));

// node_modules/@vime/react/dist/esm/components/LiveIndicator.jsx
define("vm-live-indicator", VmLiveIndicator);
var LiveIndicator_default = createComponent("vm-live-indicator", /* @__PURE__ */ new Set(["isLive", "i18n"]));

// node_modules/@vime/react/dist/esm/components/LoadingScreen.jsx
define("vm-loading-screen", VmLoadingScreen);
var LoadingScreen_default = createComponent("vm-loading-screen", /* @__PURE__ */ new Set(["playbackReady", "hideDots"]));

// node_modules/@vime/react/dist/esm/components/Menu.jsx
define("vm-menu", VmMenu);
var Menu_default = createComponent("vm-menu", /* @__PURE__ */ new Set(["active", "identifier", "controller", "slideInDirection"]));

// node_modules/@vime/react/dist/esm/components/MenuItem.jsx
define("vm-menu-item", VmMenuItem);
define("vm-icon", VmIcon);
var MenuItem_default = createComponent("vm-menu-item", /* @__PURE__ */ new Set(["identifier", "hidden", "label", "menu", "expanded", "checked", "hint", "badge", "checkIcon", "icons", "isTouch"]));

// node_modules/@vime/react/dist/esm/components/MenuRadio.jsx
define("vm-menu-radio", VmMenuRadio);
define("vm-icon", VmIcon);
define("vm-menu-item", VmMenuItem);
var MenuRadio_default = createComponent("vm-menu-radio", /* @__PURE__ */ new Set(["label", "value", "checked", "badge", "checkIcon", "icons"]));

// node_modules/@vime/react/dist/esm/components/MenuRadioGroup.jsx
define("vm-menu-radio-group", VmMenuRadioGroup);
var MenuRadioGroup_default = createComponent("vm-menu-radio-group", /* @__PURE__ */ new Set(["value"]));

// node_modules/@vime/react/dist/esm/components/MuteControl.jsx
define("vm-mute-control", VmMuteControl);
define("vm-control", VmControl);
define("vm-icon", VmIcon);
define("vm-tooltip", VmTooltip);
var MuteControl_default = createComponent("vm-mute-control", /* @__PURE__ */ new Set(["lowVolumeIcon", "highVolumeIcon", "mutedIcon", "icons", "tooltipPosition", "tooltipDirection", "hideTooltip", "keys", "volume", "muted", "i18n"]));

// node_modules/@vime/react/dist/esm/components/PipControl.jsx
define("vm-pip-control", VmPipControl);
define("vm-control", VmControl);
define("vm-icon", VmIcon);
define("vm-tooltip", VmTooltip);
var PipControl_default = createComponent("vm-pip-control", /* @__PURE__ */ new Set(["enterIcon", "exitIcon", "icons", "tooltipPosition", "tooltipDirection", "hideTooltip", "keys", "isPiPActive", "i18n", "playbackReady"]));

// node_modules/@vime/react/dist/esm/components/PlaybackControl.jsx
define("vm-playback-control", VmPlaybackControl);
define("vm-control", VmControl);
define("vm-icon", VmIcon);
define("vm-tooltip", VmTooltip);
var PlaybackControl_default = createComponent("vm-playback-control", /* @__PURE__ */ new Set(["playIcon", "pauseIcon", "icons", "tooltipPosition", "tooltipDirection", "hideTooltip", "keys", "paused", "i18n"]));

// node_modules/@vime/react/dist/esm/components/Player.jsx
define("vm-player", VmPlayer);
var Player_default = createComponent("vm-player", /* @__PURE__ */ new Set(["logger", "theme", "icons", "paused", "playing", "duration", "mediaTitle", "currentProvider", "currentSrc", "currentPoster", "currentTime", "autoplay", "ready", "playbackReady", "loop", "muted", "buffered", "playbackRate", "playbackRates", "playbackQuality", "playbackQualities", "seeking", "debug", "playbackStarted", "playbackEnded", "buffering", "controls", "isControlsActive", "isSettingsActive", "volume", "isFullscreenActive", "aspectRatio", "viewType", "isAudioView", "isVideoView", "mediaType", "isAudio", "isVideo", "isLive", "isMobile", "isTouch", "isPiPActive", "textTracks", "currentTextTrack", "isTextTrackVisible", "shouldRenderNativeTextTracks", "audioTracks", "currentAudioTrack", "autopause", "playsinline", "language", "translations", "languages", "i18n"]));

// node_modules/@vime/react/dist/esm/components/Poster.jsx
define("vm-poster", VmPoster);
var Poster_default = createComponent("vm-poster", /* @__PURE__ */ new Set(["fit", "isVideoView", "currentPoster", "mediaTitle", "playbackStarted", "currentTime"]));

// node_modules/@vime/react/dist/esm/components/Scrim.jsx
define("vm-scrim", VmScrim);
var Scrim_default = createComponent("vm-scrim", /* @__PURE__ */ new Set(["gradient", "isVideoView", "isControlsActive"]));

// node_modules/@vime/react/dist/esm/components/ScrubberControl.jsx
define("vm-scrubber-control", VmScrubberControl);
define("vm-slider", VmSlider);
define("vm-tooltip", VmTooltip);
var ScrubberControl_default = createComponent("vm-scrubber-control", /* @__PURE__ */ new Set(["alwaysShowHours", "hideTooltip", "currentTime", "duration", "noKeyboard", "buffering", "buffered", "i18n"]));

// node_modules/@vime/react/dist/esm/components/Settings.jsx
define("vm-settings", VmSettings);
define("vm-menu", VmMenu);
var Settings_default = createComponent("vm-settings", /* @__PURE__ */ new Set(["pin", "active", "isMobile", "isAudioView"]));

// node_modules/@vime/react/dist/esm/components/SettingsControl.jsx
define("vm-settings-control", VmSettingsControl);
define("vm-control", VmControl);
define("vm-icon", VmIcon);
define("vm-tooltip", VmTooltip);
var SettingsControl_default = createComponent("vm-settings-control", /* @__PURE__ */ new Set(["icon", "icons", "tooltipPosition", "tooltipDirection", "menu", "expanded", "i18n"]));

// node_modules/@vime/react/dist/esm/components/Skeleton.jsx
define("vm-skeleton", VmSkeleton);
var Skeleton_default = createComponent("vm-skeleton", /* @__PURE__ */ new Set(["effect", "ready"]));

// node_modules/@vime/react/dist/esm/components/Slider.jsx
define("vm-slider", VmSlider);
var Slider_default = createComponent("vm-slider", /* @__PURE__ */ new Set(["step", "min", "max", "value", "valueText", "label"]));

// node_modules/@vime/react/dist/esm/components/Spinner.jsx
define("vm-spinner", VmSpinner);
var Spinner_default = createComponent("vm-spinner", /* @__PURE__ */ new Set(["isVideoView", "currentProvider", "showWhenMediaLoading", "playbackReady", "buffering"]));

// node_modules/@vime/react/dist/esm/components/Submenu.jsx
define("vm-submenu", VmSubmenu);
define("vm-icon", VmIcon);
define("vm-menu", VmMenu);
define("vm-menu-item", VmMenuItem);
var Submenu_default = createComponent("vm-submenu", /* @__PURE__ */ new Set(["label", "hint", "slideInDirection", "active"]));

// node_modules/@vime/react/dist/esm/components/Time.jsx
define("vm-time", VmTime);
var Time_default = createComponent("vm-time", /* @__PURE__ */ new Set(["label", "seconds", "alwaysShowHours"]));

// node_modules/@vime/react/dist/esm/components/TimeProgress.jsx
define("vm-time-progress", VmTimeProgress);
define("vm-current-time", VmCurrentTime);
define("vm-time", VmTime);
define("vm-end-time", VmEndTime);
var TimeProgress_default = createComponent("vm-time-progress", /* @__PURE__ */ new Set(["separator", "alwaysShowHours"]));

// node_modules/@vime/react/dist/esm/components/Tooltip.jsx
define("vm-tooltip", VmTooltip);
var Tooltip_default = createComponent("vm-tooltip", /* @__PURE__ */ new Set(["hidden", "active", "position", "direction", "isTouch", "isMobile"]));

// node_modules/@vime/react/dist/esm/components/Ui.jsx
define("vm-ui", VmUi);
var Ui_default = createComponent("vm-ui", /* @__PURE__ */ new Set(["isVideoView", "playsinline", "isFullscreenActive"]));

// node_modules/@vime/react/dist/esm/components/Video.jsx
define("vm-video", VmVideo);
define("vm-file", VmFile);
var Video_default = createComponent("vm-video", /* @__PURE__ */ new Set(["willAttach", "hasCustomTextManager", "crossOrigin", "preload", "poster", "controlsList", "autoPiP", "disablePiP", "disableRemotePlayback", "mediaTitle"]));

// node_modules/@vime/react/dist/esm/components/Vimeo.jsx
define("vm-vimeo", VmVimeo);
define("vm-embed", VmEmbed);
var Vimeo_default = createComponent("vm-vimeo", /* @__PURE__ */ new Set(["videoId", "byline", "color", "portrait", "noAutoAspectRatio", "poster", "cookies", "language", "aspectRatio", "autoplay", "controls", "logger", "loop", "muted", "playsinline"]));

// node_modules/@vime/react/dist/esm/components/VolumeControl.jsx
define("vm-volume-control", VmVolumeControl);
define("vm-control", VmControl);
define("vm-icon", VmIcon);
define("vm-mute-control", VmMuteControl);
define("vm-tooltip", VmTooltip);
define("vm-slider", VmSlider);
var VolumeControl_default = createComponent("vm-volume-control", /* @__PURE__ */ new Set(["lowVolumeIcon", "highVolumeIcon", "mutedIcon", "icons", "tooltipPosition", "tooltipDirection", "hideTooltip", "muteKeys", "noKeyboard", "muted", "volume", "isMobile", "i18n"]));

// node_modules/@vime/react/dist/esm/components/Youtube.jsx
define("vm-youtube", VmYoutube);
define("vm-embed", VmEmbed);
var Youtube_default = createComponent("vm-youtube", /* @__PURE__ */ new Set(["cookies", "videoId", "showFullscreenControl", "poster", "language", "autoplay", "controls", "logger", "loop", "muted", "playsinline"]));

// node_modules/@vime/react/dist/esm/components/index.js
var Audio = Audio_default;
var CaptionControl = CaptionControl_default;
var Captions = Captions_default;
var ClickToPlay = ClickToPlay_default;
var Control = Control_default;
var ControlGroup = ControlGroup_default;
var ControlSpacer = ControlSpacer_default;
var Controls = Controls_default;
var CurrentTime = CurrentTime_default;
var Dailymotion = Dailymotion_default;
var Dash = Dash_default;
var DblClickFullscreen = DblClickFullscreen_default;
var DefaultControls = DefaultControls_default;
var DefaultSettings = DefaultSettings_default;
var DefaultUi = DefaultUi_default;
var Embed = Embed_default;
var EndTime = EndTime_default;
var File = File_default;
var FullscreenControl = FullscreenControl_default;
var Hls = Hls_default;
var Icon = Icon_default;
var IconLibrary = IconLibrary_default;
var LiveIndicator = LiveIndicator_default;
var LoadingScreen = LoadingScreen_default;
var Menu = Menu_default;
var MenuItem = MenuItem_default;
var MenuRadio = MenuRadio_default;
var MenuRadioGroup = MenuRadioGroup_default;
var MuteControl = MuteControl_default;
var PipControl = PipControl_default;
var PlaybackControl = PlaybackControl_default;
var Player = Player_default;
var Poster = Poster_default;
var Scrim = Scrim_default;
var ScrubberControl = ScrubberControl_default;
var Settings = Settings_default;
var SettingsControl = SettingsControl_default;
var Skeleton = Skeleton_default;
var Slider = Slider_default;
var Spinner = Spinner_default;
var Submenu = Submenu_default;
var Time = Time_default;
var TimeProgress = TimeProgress_default;
var Tooltip = Tooltip_default;
var Ui = Ui_default;
var Video = Video_default;
var Vimeo = Vimeo_default;
var VolumeControl = VolumeControl_default;
var Youtube = Youtube_default;

// node_modules/@vime/react/dist/esm/hooks.js
var import_react2 = __toESM(require_react());
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var noop = () => {
};
var usePlayer = (ref) => {
  const [player, setPlayer] = (0, import_react2.useState)(null);
  (0, import_react2.useLayoutEffect)(() => {
    function find() {
      var _a;
      return __awaiter(this, void 0, void 0, function* () {
        setPlayer(ref.current ? (_a = yield findPlayer(ref.current)) !== null && _a !== void 0 ? _a : null : null);
      });
    }
    find();
  }, [ref.current]);
  return player;
};
var usePlayerContext2 = (ref, prop, defaultValue) => {
  const [value, setValue] = (0, import_react2.useState)(defaultValue);
  const dispatch = (0, import_react2.useCallback)(ref.current === null ? noop : createDispatcher(ref.current), [ref.current]);
  const setter = (0, import_react2.useCallback)((value2) => {
    dispatch(prop, value2);
  }, [dispatch, prop]);
  (0, import_react2.useLayoutEffect)(() => {
    if (ref.current === null)
      return void 0;
    let cleanup;
    function connect() {
      return __awaiter(this, void 0, void 0, function* () {
        cleanup = yield usePlayerContext(ref.current, [prop], (_, newValue) => {
          setValue(newValue);
        });
      });
    }
    connect();
    return () => {
      cleanup === null || cleanup === void 0 ? void 0 : cleanup();
    };
  }, [ref.current, prop]);
  return [value, setter];
};
export {
  Audio,
  CaptionControl,
  Captions,
  ClickToPlay,
  Control,
  ControlGroup,
  ControlSpacer,
  Controls,
  CurrentTime,
  Dailymotion,
  Dash,
  DblClickFullscreen,
  DefaultControls,
  DefaultSettings,
  DefaultUi,
  Embed,
  EndTime,
  File,
  FullscreenControl,
  Hls,
  Icon,
  IconLibrary,
  LiveIndicator,
  LoadingScreen,
  Menu,
  MenuItem,
  MenuRadio,
  MenuRadioGroup,
  MuteControl,
  PipControl,
  PlaybackControl,
  Player,
  Poster,
  Provider,
  Scrim,
  ScrubberControl,
  Settings,
  SettingsControl,
  Skeleton,
  Slider,
  Spinner,
  Submenu,
  Time,
  TimeProgress,
  Tooltip,
  Ui,
  Video,
  ViewType,
  Vimeo,
  VolumeControl,
  Youtube,
  usePlayer,
  usePlayerContext2 as usePlayerContext,
  watchComponentRegistry
};
//# sourceMappingURL=@vime_react.js.map
